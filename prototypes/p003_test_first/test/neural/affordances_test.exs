defmodule AppAnimal.Neural.AffordancesTest do
  use ClusterCase, async: true
  alias Neural.Affordances, as: UT

  test "a 'self-generated' affordance" do
    # In actuality, this will be generated by changes to the environment.
    switchboard_pid = from_trace([Cluster.perception_edge(:big_paragraph_change),
                                  endpoint()])
    affordances_pid = affordances(sent_to: switchboard_pid)
    
    UT.spontaneous_affordance(affordances_pid, big_paragraph_change: :no_data)
    assert_receive([:no_data, from: :endpoint])

    
    # UT.affordance_request(affordances_pid, current_paragraph_text: :no_data)
    # UT.make_change(affordances_pid, named: x, using: data, auto_request: :current_paragraph_text)

    # UT.program_response(affordance_request, fn ->  end)
    

    # assert_receive(["some text", from: :endpoint])
  end
end
